import telebot
from telebot import types
import logging
from config import TOKEN
from CAR import CAR_BRANDS
from CITIES import CITIES

from questions import questions
from Answers import Answers
bot = telebot.TeleBot(TOKEN)

DELIVERY_TIMES = [f"{hour}:{minute}" for hour in range(8, 20) for minute in ('00', '30')]

logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def generate_back_button():
    return types.KeyboardButton("üîô –ù–∞–∑–∞–¥")

def send_back_button(chat_id, text):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = generate_back_button()
    markup.add(back_button)
    bot.send_message(chat_id, text, reply_markup=markup)

STATE_NAME = 1
STATE_SURNAME = 2
STATE_PASSPORT_NUMBER = 3
STATE_DRIVER_LICENSE = 4
STATE_CONTACT = 5
DELIVERY_TIME = 6

user_data = {}
user_states = {}

def get_user_state(user_id):
    return user_states.get(user_id, None)

def update_user_state(user_id, state):
    user_states[user_id] = state

def clear_user_state(user_id):
    user_states.pop(user_id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def welcome(message):
    try:
        with open('static/welcome.webp', 'rb') as sti:
            bot.send_sticker(message.chat.id, sti)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–°–∫–∏–¥–∫–∏ -%")
        item2 = types.KeyboardButton("üöó –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã")
        item3 = types.KeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        item4 = types.KeyboardButton("Instagramüì∑")
        item5 = types.KeyboardButton("–ö–∞–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ë–æ—Ç–æ–º‚ùì")
        markup.add(item1, item2, item3, item4, item5)

        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–ê—Ä–µ–Ω–¥—É, {message.from_user.first_name}!\n–Ø - <b>{bot.get_me().first_name}</b>, –±–æ—Ç –æ—Ç ExeFox.",
                         parse_mode='html', reply_markup=markup)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}, {str(e)}")


@bot.message_handler(func=lambda message: message.text == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
def handle_start(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    questions = ["–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    for question in questions:
        markup.add(types.KeyboardButton(question))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–í–æ–ø—Ä–æ—Å 1")
def handle_question_1(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1: ...")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç


# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–í–æ–ø—Ä–æ—Å 2, –í–æ–ø—Ä–æ—Å 3) –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ








@bot.message_handler(func=lambda message: message.text == "Instagramüì∑")
def handle_instagram_button(message):
    instagram_url = "https://www.instagram.com/autoarenda_org/"
    instagram_image_url = "https://th.bing.com/th/id/OIG1.Ox7kojaGCSw8UJMRhAKW?pid=ImgGn"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Instagram
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ Instagram", url=instagram_url)
    markup.add(button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    bot.send_photo(message.chat.id, instagram_image_url, reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
def ask_for_name(message):
    update_user_state(message.from_user.id, STATE_NAME)
    msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ò–º—è:")
    bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message):
    if get_user_state(message.from_user.id) == STATE_NAME:
        if message.text.strip() and message.text != '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            user_data[message.from_user.id] = {'name': message.text}
            update_user_state(message.from_user.id, STATE_SURNAME)
            msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –§–∞–º–∏–ª–∏—é:")
            bot.register_next_step_handler(msg, process_surname_step)
        else:
            msg = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.")
            bot.register_next_step_handler(msg, process_name_step)

def process_surname_step(message):
    if get_user_state(message.from_user.id) == STATE_SURNAME:
        if message.text.strip() and message.text != '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            user_data[message.from_user.id]['surname'] = message.text
            update_user_state(message.from_user.id, STATE_PASSPORT_NUMBER)
            msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ù–æ–º–µ—Ä –ü–∞—Å–ø–æ—Ä—Ç–∞:")
            bot.register_next_step_handler(msg, process_passport_step)
        else:
            msg = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.")
            bot.register_next_step_handler(msg, process_surname_step)

def process_passport_step(message):
    if get_user_state(message.from_user.id) == STATE_PASSPORT_NUMBER:
        if message.text.strip() and message.text != '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            user_data[message.from_user.id]['passport_number'] = message.text
            update_user_state(message.from_user.id, STATE_DRIVER_LICENSE)
            msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤:")
            bot.register_next_step_handler(msg, process_driver_license_step)
        else:
            msg = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞.")
            bot.register_next_step_handler(msg, process_passport_step)

def process_driver_license_step(message):
    if get_user_state(message.from_user.id) == STATE_DRIVER_LICENSE:
        if message.text.strip() and message.text != '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            user_data[message.from_user.id]['driver_license'] = message.text
            update_user_state(message.from_user.id, STATE_CONTACT)
            msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –∏–ª–∏ –º–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
            bot.register_next_step_handler(msg, process_contact_step)
        else:
            msg = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤.")
            bot.register_next_step_handler(msg, process_driver_license_step)

def process_contact_step(message, process_time_step):
    if get_user_state(message.from_user.id) == STATE_CONTACT:
        if message.text.strip() and message.text != '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            user_data[message.from_user.id]['contact'] = message.text
            update_user_state(message.from_user.id, DELIVERY_TIME)
            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:")
            bot.register_next_step_handler(msg, process_time_step)
        else:
            msg = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            bot.register_next_step_handler(msg, process_contact_step)

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == STATE_CONTACT)
def process_contact_step(message):
    if message.text:
        user_data[message.from_user.id]['contact'] = message.text
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.")
        save_rental_info(user_data[message.from_user.id])
        clear_user_state(message.from_user.id)
        user_data.pop(message.from_user.id, None)
    else:
        msg = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        bot.register_next_step_handler(msg, process_contact_step)

def save_rental_info(rental_info):
    try:
        with open('rental_orders.txt', 'a', encoding='utf-8') as f:
            f.write(str(rental_info) + '\n')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {type(e).__name__}, {str(e)}")

@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        welcome(message)
        return

    rental_info = {}
    try:
        if message.chat.type == 'private':
            if message.text == '–°–∫–∏–¥–∫–∏ -%':
                bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å —É –Ω–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.')
            elif message.text == 'üöó –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for brand in CAR_BRANDS.keys():
                    if CAR_BRANDS[brand]:
                        item = types.KeyboardButton(brand)
                        markup.add(item)
                back_button = generate_back_button()
                markup.add(back_button)
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=markup)
            elif message.text in CAR_BRANDS.keys():
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for model in CAR_BRANDS[message.text]:
                    item = types.KeyboardButton(model)
                    markup.add(item)
                back_button = generate_back_button()
                markup.add(back_button)
                rental_info['brand'] = message.text
                bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –≥–æ–¥:", reply_markup=markup)
            elif any(model in message.text for model in sum(CAR_BRANDS.values(), [])):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for city in CITIES:
                    item = types.KeyboardButton(city)
                    markup.add(item)
                back_button = generate_back_button()
                markup.add(back_button)
                rental_info['model'] = message.text
                bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)
            elif message.text in CITIES:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for time in DELIVERY_TIMES:
                    item = types.KeyboardButton(time)
                    markup.add(item)
                back_button = generate_back_button()
                markup.add(back_button)
                rental_info['city'] = message.text
                bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 8:00 –¥–æ 20:00. –î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:", reply_markup=markup)
            elif message.text in DELIVERY_TIMES:
                rental_info['time'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                confirm_button = types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
                markup.add(confirm_button)
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.", reply_markup=markup)
            else:
                send_back_button(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}, {str(e)}")



bot.polling(none_stop=True)
