import telebot
from telebot import types
import logging
from config import TOKEN
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


bot = telebot.TeleBot(TOKEN)






booking_data_file = 'booking_data.txt'







logging.basicConfig(filename='bot.log', level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def welcome(message):
    try:
        with open('static/welcome.webp', 'rb') as sti:
            bot.send_sticker(message.chat.id, sti)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–°–∫–∏–¥–∫–∏ -%")
        item2 = types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüöó")
        item3 = types.KeyboardButton("‚ùì–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        item4 = types.KeyboardButton("Instagramüì∑")
        item5 = types.KeyboardButton("–ö–∞–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ë–æ—Ç–æ–º‚ùì")
        markup.add(item1, item2, item3, item4, item5, )

        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–ê—Ä–µ–Ω–¥—É, {message.from_user.first_name}!\n–Ø - <b>{bot.get_me().first_name}</b>, –±–æ—Ç –æ—Ç ExeFox.",
                         parse_mode='html', reply_markup=markup)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}, {str(e)}")


@bot.message_handler(func=lambda message: message.text == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
def handle_start(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    questions = ["–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    for question in questions:
        markup.add(types.KeyboardButton(question))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–í–æ–ø—Ä–æ—Å 1")
def handle_question_1(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1: ...")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç


@bot.message_handler(func=lambda message: message.text == "Instagramüì∑")
def handle_instagram_button(message):
    instagram_url = "https://www.instagram.com/autoarenda_org/"
    instagram_image_url = "https://th.bing.com/th/id/OIG1.Ox7kojaGCSw8UJMRhAKW?pid=ImgGn"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ Instagram", url=instagram_url)
    markup.add(button)
    bot.send_photo(message.chat.id, instagram_image_url, reply_markup=markup)


car_brands = ["Toyota", "Ford", "Honda", "Volkswagen"]
car_models = {
    "Toyota": ["Corolla", "Camry", "RAV4", "Highlander"],
    "Ford": ["Focus", "Fusion", "Mustang", "Explorer"],
    "Honda": ["Civic", "Accord", "CR-V", "Pilot"],
    "Volkswagen": ["Golf", "Jetta", "Passat", "Tiguan"]
}

brand = {
    'brand_1': 'Toyota',
    'brand_2': 'Ford',
    'brand_3': 'Honda',
    'brand_4': 'Volkswagen'
}

user_data = {}
@bot.message_handler(func=lambda message: message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüöó')
def handle_message(message):
    if message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüöó':
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("Toyota", callback_data="brand_1"),
                   InlineKeyboardButton("Ford", callback_data='brand_2'),
                   InlineKeyboardButton("Honda", callback_data='brand_3'),
                   InlineKeyboardButton("Volkswagen", callback_data='brand_4'))
        markup.row(InlineKeyboardButton("Back to main menu", callback_data='main_menu'))
        bot.send_message(message.from_user.id, 'Select a car brand', reply_markup=markup)
    else:
        bot.send_message(message.from_user.id, 'Invalid command')



@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data.startswith('brand_'):
        user_data['brand'] = {
            '1': 'Toyota',
            '2': 'Ford',
            '3': 'Honda',
            '4': 'Volkswagen'
        }[call.data[6:]]
        andle_callback_query(call)
    elif call.data.startswith('model_'):
        user_data['model'] = {
            "Toyota": ["Corolla", "Camry", "RAV4", "Highlander"],
            "Ford": ["Focus", "Fusion", "Mustang", "Explorer"],
            "Honda": ["Civic", "Accord", "CR-V", "Pilot"],
            "Volkswagen": ["Golf", "Jetta", "Passat", "Tiguan"]
        }[user_data['brand']][int(call.data[6:]) - 1]
        callback_query_handler_year(call)
    elif call.data.startswith('year'):
        user_data['year'] = call.data[5:]
        select_month(call)
    elif call.data.startswith('month'):
        user_data['month'] = int(call.data[6:])  # Convert to int
        month_names = {1: '—è–Ω–≤–∞—Ä—å', 2: '—Ñ–µ–≤—Ä–∞–ª—å', 3: '–º–∞—Ä—Ç', 4: '–∞–ø—Ä–µ–ª—å', 5: '–º–∞–π', 6: '–∏—é–Ω—å', 7: '–∏—é–ª—å', 8: '–∞–≤–≥—É—Å—Ç',
                       9: '—Å–µ–Ω—Ç—è–±—Ä—å', 10: '–æ–∫—Ç—è–±—Ä—å', 11: '–Ω–æ—è–±—Ä—å', 12: '–¥–µ–∫–∞–±—Ä—å'}
        user_data['month_name'] = month_names.get(user_data['month'], 'Unknown month')
        day_selector(call)
    elif call.data.startswith('day'):
        user_data['day'] = int(call.data[4:])  # Convert to int
        bot.send_message(call.message.chat.id, f'You selected day {user_data["day"]}.')
        show_delivery_times(call)
    elif call.data == 'main_menu':
        bot.send_message(call.message.chat.id, 'Back to main menu')
    elif call.data.startswith('time'):
        confirm_booking(call)


def andle_callback_query(call):
    if call.data.startswith('brand_'):
        selected_car_brand = int(call.data[6:]) - 1
        markup = InlineKeyboardMarkup()
        for i in range(len(car_models[car_brands[selected_car_brand]])):
            markup.row(InlineKeyboardButton(car_models[car_brands[selected_car_brand]][i], callback_data=f"model_{i+1}"))
        markup.row(InlineKeyboardButton("Back to main menu", callback_data='main_menu'))
        bot.send_message(call.message.chat.id, 'Select a car model', reply_markup=markup)
    elif call.data.startswith('model_'):
        # –Ω–µ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ user_data['brand']
        selected_car_model = int(call.data[6:]) - 1
        bot.send_message(call.message.chat.id, f"You selected {call.data[6:]}", reply_markup=InlineKeyboardMarkup())
    elif call.data == 'main_menu':
        # –Ω–µ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ user_data['brand']
        bot.send_message(call.message.chat.id, 'Main menu', reply_markup=InlineKeyboardMarkup())




def callback_query_handler_year(call):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("2024", callback_data=f'year_2024'),
                   InlineKeyboardButton("2025", callback_data=f'year_2025'),
                   InlineKeyboardButton("2026", callback_data=f'year_2026'))
    markup.row(InlineKeyboardButton("Back to main menu", callback_data='main_menu'))
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ–¥ –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)

def select_month(call):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å", callback_data=f"month_1"),
                   InlineKeyboardButton("February", callback_data=f"month_2"),
                   InlineKeyboardButton("March", callback_data=f"month_3"),
                   InlineKeyboardButton("April", callback_data=f"month_4"),
                   InlineKeyboardButton("May", callback_data=f"month_5"))
    markup.row(InlineKeyboardButton("June", callback_data=f"month_6"),
                   InlineKeyboardButton("July", callback_data=f"month_7"),
                   InlineKeyboardButton("August", callback_data=f"month_8"),
                   InlineKeyboardButton("September", callback_data=f"month_9"),
                   InlineKeyboardButton("October", callback_data=f"month_10"))
    markup.row(InlineKeyboardButton("November", callback_data=f"month_11"),
                   InlineKeyboardButton("December", callback_data=f"month_12"))
    markup.row(InlineKeyboardButton("Back to main menu", callback_data='main_menu'))
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—è—Ü –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def day_selector(call):
    markup = InlineKeyboardMarkup()
    days = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',
            '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']
    for day in range(0, len(days), 5):
        markup.row(InlineKeyboardButton(days[day], callback_data=f'day_{days[day]}'),
                   InlineKeyboardButton(days[day+1], callback_data=f'day_{days[day+1]}'),
                   InlineKeyboardButton(days[day+2], callback_data=f'day_{days[day+2]}'),
                   InlineKeyboardButton(days[day+3], callback_data=f'day_{days[day+3]}'),
                   InlineKeyboardButton(days[day+4], callback_data=f'day_{days[day+4]}'))
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)

def show_delivery_times(call):
    markup = InlineKeyboardMarkup()
    for hour in range(0, 24, 3):
        markup.row(InlineKeyboardButton(f"{hour}:00", callback_data=f"time_{hour}:00"),
                   InlineKeyboardButton(f"{hour}:30", callback_data=f"time_{hour}:30"),
                   InlineKeyboardButton(f"{hour+1}:00", callback_data=f"time_{hour+1}:00"),
                   InlineKeyboardButton(f"{hour+1}:30", callback_data=f"time_{hour+1}:30"),
                   InlineKeyboardButton(f"{hour+2}:00", callback_data=f"time_{hour+2}:00"))
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)




def confirm_booking(call):
    bot.send_message(call.message.chat.id, '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä')
    with open('output.txt', 'a', encoding='utf-8') as f:
        f.write(f'–ú–∞—Ä–∫–∞: {user_data.get("brand")}\n–ú–æ–¥–µ–ª—å: {user_data.get("model")}\n–ì–æ–¥: {user_data.get("year")}\n–ú–µ—Å—è—Ü –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("month_name")}\n–î–µ–Ω—å –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("day")}\n–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {call.data[5:]}\n\n')
    bot.send_message(call.message.chat.id, f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: \n–ú–∞—Ä–∫–∞: {user_data.get("brand")}\n–ú–æ–¥–µ–ª—å: {user_data.get("model")}\n–ì–æ–¥: {user_data.get("year")}\n–ú–µ—Å—è—Ü –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("month_name")}\n–î–µ–Ω—å –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("day")}\n–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {call.data[5:]}')

if __name__ == '__main__':
    bot.polling(none_stop=True)
