import telebot
from telebot import types
import logging

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–æ–¥—É–ª–µ config.py
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

CAR_BRANDS = {
    "BMW": ["BMW x1 2020", "BMW 2019", "BMW 2023"],
    "Mercedes": ["Mercedes A-Class 2021"],
    "Audi": ["Audi A4 2022"],
    "Skoda": ["Skoda Octavia 2021"],
    "Clio": ["Clio 4 2019"],
    "Citroen": ["Citroen C3 2020"],
    "Peugeot": ["Peugeot 208 2021"],
    "Volkswagen": ["Volkswagen Golf 2022"]
}

CITIES = ["–ü–æ–¥–≥–æ—Ä–∏—Ü–∞", "–ë–∞—Ä", "–¶–µ—Ç–∏–Ω–µ", "–ê–Ω–¥—Ä–∏–µ–≤–∏—Ü–∞", "–ë–µ—Ä–∞–Ω–µ", "–ë–∏–µ–ª–æ-–ü–æ–ª–µ", "–ë—É–¥–≤–∞", "–î–∞–Ω–∏–ª–æ–≤–≥—Ä–∞–¥", "–ñ–∞–±–ª—è–∫", "–ö–æ–ª–∞—à–∏–Ω", "–ö–æ—Ç–æ—Ä", "–ú–æ–π–∫–æ–≤–∞—Ü", "–ù–∏–∫—à–∏—á", "–ü–ª–∞–≤", "–ü–ª–µ–≤–ª—è", "–ü–ª—É–∂–∏–Ω–µ", "–†–æ–∂–∞–µ", "–¢–∏–≤–∞—Ç", "–£–ª—Ü–∏–Ω—å", "–•–µ—Ä—Ü–µ–≥-–ù–æ–≤–∏", "–®–∞–≤–Ω–∏–∫"]

DELIVERY_TIMES = [f"{hour}:{minute}" for hour in range(8, 21) for minute in ('00', '30')]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
def generate_back_button():
    return types.KeyboardButton("üîô –ù–∞–∑–∞–¥")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def send_back_button(chat_id, text):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = generate_back_button()
    markup.add(back_button)
    bot.send_message(chat_id, text, reply_markup=markup)

@bot.message_handler(commands=['start'])
def welcome(message):
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª 'static/welcome.webp' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        with open('static/welcome.webp', 'rb') as sti:
            bot.send_sticker(message.chat.id, sti)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–°–∫–∏–¥–∫–∏ -%")
        item2 = types.KeyboardButton("üöó –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã")
        item3 = types.KeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

        markup.add(item1, item2, item3)

        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n–Ø - <b>{bot.get_me().first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–ø—ã—Ç–Ω–æ–π –õ–∏—Å–æ–π.",
                         parse_mode='html', reply_markup=markup)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}, {str(e)}")

@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        welcome(message)
        return

    rental_info = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
    try:
        if message.chat.type == 'private':
            if message.text == '–°–∫–∏–¥–∫–∏ -%':
                bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å —É –Ω–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.')
            elif message.text == 'üöó –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for brand in CAR_BRANDS.keys():
                    if CAR_BRANDS[brand]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
                        item = types.KeyboardButton(brand)
                        markup.add(item)
                back_button = generate_back_button()
                markup.add(back_button)
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=markup)
            elif message.text in CAR_BRANDS.keys():
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for model in CAR_BRANDS[message.text]:
                    item = types.KeyboardButton(model)
                    markup.add(item)
                back_button = generate_back_button()
                markup.add(back_button)
                rental_info['brand'] = message.text
                bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –≥–æ–¥:", reply_markup=markup)
            elif any(model in message.text for model in sum(CAR_BRANDS.values(), [])):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for city in CITIES:
                    item = types.KeyboardButton(city)
                    markup.add(item)
                back_button = generate_back_button()
                markup.add(back_button)
                rental_info['model'] = message.text
                bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)
            elif message.text in CITIES:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for time in DELIVERY_TIMES:
                    item = types.KeyboardButton(time)
                    markup.add(item)
                back_button = generate_back_button()
                markup.add(back_button)
                rental_info['city'] = message.text
                bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 8:00 –¥–æ 20:00. –î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:", reply_markup=markup)
            elif message.text in DELIVERY_TIMES:
                rental_info['time'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                confirm_button = types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
                markup.add(confirm_button)
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.", reply_markup=markup)
            elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ '–ò–º—è', '–§–∞–º–∏–ª–∏—é', '–ù–æ–º–µ—Ä –ü–∞—Å–ø–æ—Ä—Ç–∞', –≥–æ–¥ –≤—ã–¥–∞—á–∏ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –∏–ª–∏ –º–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            else:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                personal_info = message.text.split(',')
                if len(personal_info) >= 5:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    rental_info['personal_info'] = {
                        'name': personal_info[0].strip(),
                        'surname': personal_info[1].strip(),
                        'passport_number': personal_info[2].strip(),
                        'driver_license': personal_info[3].strip(),
                        'contact': personal_info[4].strip()
                    }
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Ñ–∞–π–ª
                    with open('rental_orders.txt', 'a', encoding='utf-8') as f:
                        f.write(str(rental_info) + '\n')
                    bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.")
                else:
                    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}, {str(e)}")

# RUN
bot.polling(none_stop=True)
