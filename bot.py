import telebot

import logging
import os
import re
from operator import call
from telebot import types

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from Car_brands import car_brands

from Car_model import car_models

from config import TOKEN
from res import responses

bot = telebot.TeleBot(TOKEN)
logging.basicConfig(filename='bot.log', level=logging.INFO,
                    format='%(pastime)s - %(name)s - %(levelness)s - %(message)s')


@bot.message_handler(commands=['start'])
def welcome(message):
    try:
        with open('static/welcome.webp', 'rb') as sti:
            bot.send_sticker(message.chat.id, sti)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–°–∫–∏–¥–∫–∏ -%"),
                   types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüöó"),
                   types.KeyboardButton("/FAQ"),
                   types.KeyboardButton("Instagramüì∑"),
                   types.KeyboardButton("–ö–∞–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ë–æ—Ç–æ–º‚ùì"))

        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–ê—Ä–µ–Ω–¥—É, {message.from_user.first_name}!\n–Ø - "
                         f"<b>{bot.get_me().first_name}</b>, –±–æ—Ç –æ—Ç ExeFox.",
                         parse_mode='html', reply_markup=markup)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}, {str(e)}")


@bot.message_handler(func=lambda message: message.text == "–ö–∞–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ë–æ—Ç–æ–º‚ùì")
def handle_instagram_button(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π –æ—á–µ–Ω—å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å  –Ω–∞  –∫–Ω–æ–ø–∫—É *–û—Å—Ç–∞–≤–∏—Ç—å "
                     "–ó–∞—è–≤–∫—Éüöó* —Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Å—Ç–æ  –≤—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!!! ")


@bot.message_handler(func=lambda message: message.text == "Instagramüì∑")
def handle_instagram_button(message):
    instagram_url = "https://www.instagram.com/autoarenda_org/"
    instagram_image_url = "https://th.bing.com/th/id/OIG1.Ox7kojaGCSw8UJMRhAKW?pid=ImgGn"
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ Instagram", url=instagram_url)
    markup.add(button)
    bot.send_photo(message.chat.id, instagram_image_url, reply_markup=markup)


selected_month = None
selected_return_month = None
selected_city: None = None
selected_return_city = None
user_data = {}


@bot.message_handler(func=lambda message: message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüöó')
def get_first_name_input(message):
    if message.text in {'/FAQ', '–°–∫–∏–¥–∫–∏ -%', '–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüöó', 'Instagramüì∑',
                        '–ö–∞–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ë–æ—Ç–æ–º‚ùì'}:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.')
        bot.register_next_step_handler(message, get_first_name_input)
    elif not message.text:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.')
        bot.register_next_step_handler(message, get_first_name_input)
    else:
        user_data['first_name'] = message.text
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é:')
        bot.register_next_step_handler(message, get_second_name_input)


def get_second_name_input(message):
    if message.text in {'/FAQ', '–°–∫–∏–¥–∫–∏ -%', '–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüöó', 'Instagramüì∑',
                        '–ö–∞–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ë–æ—Ç–æ–º‚ùì'}:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.')
        bot.register_next_step_handler(message, get_second_name_input)
    elif not message.text:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.')
        bot.register_next_step_handler(message, get_second_name_input)
    else:
        user_data['last_name'] = message.text
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä Telegram/WhatsApp/Viber:')
        bot.register_next_step_handler(message, get_phone_number_input)


def get_phone_number_input(message):
    if message.text in {'/FAQ', '–°–∫–∏–¥–∫–∏ -%', '–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüöó', 'Instagramüì∑',
                        '–ö–∞–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ë–æ—Ç–æ–º‚ùì'}:
        bot.register_next_step_handler(message, get_phone_number_input)
    elif not message.text:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        bot.register_next_step_handler(message, get_phone_number_input)
    else:
        user_data['phone_number'] = message.text
        user_data['full_name'] = f"{user_data['first_name']} {user_data['last_name']}"
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("Toyota", callback_data="brand_1"),
                   InlineKeyboardButton("Ford", callback_data='brand_2'),
                   InlineKeyboardButton("Honda", callback_data='brand_3'),
                   InlineKeyboardButton("Volkswagen", callback_data='brand_4'))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –ú–∞—Ä–∫—É –ú–∞—à–∏–Ω—ã', reply_markup=markup)


@bot.message_handler(commands=['FAQ'])
def handle_faq(message):
    with open('FAQ.txt', 'r', encoding='utf-8') as file:
        file_contents = file.read()
    bot.send_message(message.chat.id, f"**FAQ Section:**\n\n{file_contents}", parse_mode='Markdown')


@bot.message_handler(commands=['help'])
def ask(message):
    markup = types.ReplyKeyboardMarkup()
    bot.send_message(chat_id=message.from_user.id,
                     text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}!\n" "–ï—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ: \n" "/start "
                          "–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" "/FAQ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ",
                     parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data.startswith('brand_'):
        user_data['brand'] = {
            '1': 'Toyota',
            '2': 'Ford',
            '3': 'Honda',
            '4': 'Volkswagen'
        }[call.data[6:]]
        andle_callback_query(call)
    elif call.data.startswith('model_'):
        user_data['model'] = {
            "Toyota": ["Corolla", "Camry", "RAV4", "Highlander"],
            "Ford": ["Focus", "Fusion", "Mustang", "Explorer"],
            "Honda": ["Civic", "Accord", "CR-V", "Pilot"],
            "Volkswagen": ["Golf", "Jetta", "Passat", "Tiguan"]
        }[user_data['brand']][int(call.data[6:]) - 1]
        callback_query_handler_year(call)
    elif call.data.startswith('year'):
        user_data['year'] = call.data[5:]
        select_month(call)
    elif call.data.startswith('month'):
        user_data['month'] = int(call.data[6:])  # Convert to int
        month_names = {1: '—è–Ω–≤–∞—Ä—å', 2: '—Ñ–µ–≤—Ä–∞–ª—å', 3: '–º–∞—Ä—Ç', 4: '–∞–ø—Ä–µ–ª—å', 5: '–º–∞–π', 6: '–∏—é–Ω—å', 7: '–∏—é–ª—å', 8: '–∞–≤–≥—É—Å—Ç',
                       9: '—Å–µ–Ω—Ç—è–±—Ä—å', 10: '–æ–∫—Ç—è–±—Ä—å', 11: '–Ω–æ—è–±—Ä—å', 12: '–¥–µ–∫–∞–±—Ä—å'}
        user_data['month_name'] = month_names.get(user_data['month'], 'Unknown month')
        select_return_month(call)
    elif call.data.startswith('return_month'):
        selected_return_month: int = int(call.data.split('_')[2])  # Convert to int
        return_month_names = {1: '—è–Ω–≤–∞—Ä—å', 2: '—Ñ–µ–≤—Ä–∞–ª—å', 3: '–º–∞—Ä—Ç', 4: '–∞–ø—Ä–µ–ª—å', 5: '–º–∞–π', 6: '–∏—é–Ω—å', 7: '–∏—é–ª—å',
                              8: '–∞–≤–≥—É—Å—Ç',
                              9: '—Å–µ–Ω—Ç—è–±—Ä—å', 10: '–æ–∫—Ç—è–±—Ä—å', 11: '–Ω–æ—è–±—Ä—å', 12: '–¥–µ–∫–∞–±—Ä—å'}
        user_data['return_month_name'] = return_month_names.get(selected_return_month, 'Unknown return month')
        day_selector(call)
    elif call.data.startswith('day'):
        user_data['day'] = int(call.data[4:])
        select_return_day(call)
    elif call.data.startswith('return_day'):
        user_data['return_day'] = int(call.data[10:].replace('_', ''))
        show_delivery_times(call)
    elif call.data.startswith('time'):
        user_data['time'] = call.data[5:]
        select_return_time(call)
    elif call.data.startswith('return_time'):
        user_data['return_time'] = call.data[10:]
        select_city(call)
    elif call.data.startswith('city'):
        city_number = int(call.data[5:])
        user_data['city'] = city_number
        city_names = {'1': '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '2': '–ë–∞—Ä', '3': '–¶–µ—Ç–∏–Ω–µ', '4': '–ê–Ω–¥—Ä–∏–µ–≤–∏—Ü–∞', '5': '–ë–µ—Ä–∞–Ω–µ', '6': '–ë–∏–µ–ª–æ-–ü–æ–ª–µ',
                      '7': '–ë—É–¥–≤–∞', '8': '–î–∞–Ω–∏–ª–æ–≤–≥—Ä–∞–¥', '9': '–ñ–∞–±–ª—è–∫', '10': '–ö–æ–ª–∞—à–∏–Ω', '11': '–ö–æ—Ç–æ—Ä', '12': '–ú–æ–π–∫–æ–≤–∞—Ü',
                      '13': '–ù–∏–∫—à–∏—á', '14': '–ü–ª–∞–≤', '15': '–ü–ª–µ–≤–ª—è', '16': '–ü–ª—É–∂–∏–Ω–µ', '17': '–†–æ–∂–∞–µ', '18': '–¢–∏–≤–∞—Ç',
                      '19': '–£–ª—Ü–∏–Ω—å', '20': '–•–µ—Ä—Ü–µ–≥-–ù–æ–≤–∏', '21': '–®–∞–≤–Ω–∏–∫'}
        user_data['city_name'] = city_names.get(str(city_number), 'Unknown city')
        select_return_city(call)
    elif call.data.startswith('return_city'):
        selected_return_city = int(call.data.split('_')[2])  # Convert to int
        return_city_names = {'1': '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '2': '–ë–∞—Ä', '3': '–¶–µ—Ç–∏–Ω–µ', '4': '–ê–Ω–¥—Ä–∏–µ–≤–∏—Ü–∞', '5': '–ë–µ—Ä–∞–Ω–µ',
                             '6': '–ë–∏–µ–ª–æ-–ü–æ–ª–µ',
                             '7': '–ë—É–¥–≤–∞', '8': '–î–∞–Ω–∏–ª–æ–≤–≥—Ä–∞–¥', '9': '–ñ–∞–±–ª—è–∫', '10': '–ö–æ–ª–∞—à–∏–Ω', '11': '–ö–æ—Ç–æ—Ä',
                             '12': '–ú–æ–π–∫–æ–≤–∞—Ü',
                             '13': '–ù–∏–∫—à–∏—á', '14': '–ü–ª–∞–≤', '15': '–ü–ª–µ–≤–ª—è', '16': '–ü–ª—É–∂–∏–Ω–µ', '17': '–†–æ–∂–∞–µ',
                             '18': '–¢–∏–≤–∞—Ç',
                             '19': '–£–ª—Ü–∏–Ω—å', '20': '–•–µ—Ä—Ü–µ–≥-–ù–æ–≤–∏', '21': '–®–∞–≤–Ω–∏–∫'}
        user_data['return_city_name'] = return_city_names.get(str(selected_return_city),
                                                              "Unknown return city") if return_city_names.get(
            str(selected_return_city)) else "Unknown return city"
        confirm_booking(call)


def andle_callback_query(call):
    if call.data.startswith('brand_'):
        selected_car_brand = int(call.data[6:]) - 1
        markup = InlineKeyboardMarkup()
        for i in range(0, len(car_models[car_brands[selected_car_brand]]), 2):
            if i + 1 < len(car_models[car_brands[selected_car_brand]]):
                markup.row(
                    InlineKeyboardButton(car_models[car_brands[selected_car_brand]][i], callback_data=f"model_{i + 1}"),
                    InlineKeyboardButton(car_models[car_brands[selected_car_brand]][i + 1],
                                         callback_data=f"model_{i + 2}"))
            else:
                markup.row(
                    InlineKeyboardButton(car_models[car_brands[selected_car_brand]][i], callback_data=f"model_{i + 1}"))
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã', reply_markup=markup)
    elif call.data.startswith('model_'):
        int(call.data[6:]) - 1
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {call.data[6:]}", reply_markup=InlineKeyboardMarkup())
    elif call.data == 'main_menu':
        bot.send_message(call.message.chat.id, '', reply_markup=InlineKeyboardMarkup())


def callback_query_handler_year(call):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–í–æ–∑–º–æ–∂–Ω–∞ –±—Ä–æ–Ω—å –º–∞—à–∏–Ω –Ω–∞ –≥–æ–¥!!!", callback_data='main_menu'))
    markup.row(InlineKeyboardButton("2024", callback_data=f'year_2024'),
               InlineKeyboardButton("2025", callback_data=f'year_2025'),
               InlineKeyboardButton("2026", callback_data=f'year_2026'))
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def select_month(call):
    global selected_month, selected_return_month
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–¶–µ–Ω—ã –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Ä–∞–∑–Ω—ã–µ", callback_data='main_menu'))
    markup.row(InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å", callback_data=f"month_1"),
               InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å", callback_data=f"month_2"),
               InlineKeyboardButton("–ú–∞—Ä—Ç", callback_data=f"month_3"),
               InlineKeyboardButton("–ê–ø—Ä–µ–ª—å", callback_data=f"month_4"),
               InlineKeyboardButton("–ú–∞–π", callback_data=f"month_5"))
    markup.row(InlineKeyboardButton("–ò—é–Ω—å", callback_data=f"month_6"),
               InlineKeyboardButton("–ò—é–ª—å", callback_data=f"month_7"),
               InlineKeyboardButton("–ê–≤–≥—É—Å—Ç", callback_data=f"month_8"),
               InlineKeyboardButton("–°–µ–Ω—Ç—è–±—Ä—å", callback_data=f"month_9"),
               InlineKeyboardButton("–û–∫—Ç—è–±—Ä—å", callback_data=f"month_10"))
    markup.row(InlineKeyboardButton("–ù–æ—è–±—Ä—å", callback_data=f"month_11"),
               InlineKeyboardButton("–î–µ–∫–∞–±—Ä—å", callback_data=f"month_12"))

    if call.data.startswith('month_'):
        selected_month = int(call.data.split('_')[1])
        bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {get_month_name(selected_month)}', reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def select_return_month(call):
    global selected_return_month
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–¶–µ–Ω—ã –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Ä–∞–∑–Ω—ã–µ", callback_data='main_menu'))
    markup.row(InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å", callback_data=f"return_month_1"),
               InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å", callback_data=f"return_month_2"),
               InlineKeyboardButton("–ú–∞—Ä—Ç", callback_data=f"return_month_3"),
               InlineKeyboardButton("–ê–ø—Ä–µ–ª—å", callback_data=f"return_month_4"),
               InlineKeyboardButton("–ú–∞–π", callback_data=f"return_month_5"))
    markup.row(InlineKeyboardButton("–ò—é–Ω—å", callback_data=f"return_month_6"),
               InlineKeyboardButton("–ò—é–ª—å", callback_data=f"return_month_7"),
               InlineKeyboardButton("–ê–≤–≥—É—Å—Ç", callback_data=f"return_month_8"),
               InlineKeyboardButton("–°–µ–Ω—Ç—è–±—Ä—å", callback_data=f"return_month_9"),
               InlineKeyboardButton("–û–∫—Ç—è–±—Ä—å", callback_data=f"return_month_10"))
    markup.row(InlineKeyboardButton("–ù–æ—è–±—Ä—å", callback_data=f"return_month_11"),
               InlineKeyboardButton("–î–µ–∫–∞–±—Ä—å", callback_data=f"return_month_12"))

    if call.data.startswith('return_month_'):
        selected_return_month = int(call.data.split('_')[1])
        bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {get_month_name(selected_return_month)} –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞',
                         reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def get_month_name(month):
    month_names = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å',
                   '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    return month_names[month - 1]


def day_selector(call):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–ß–µ–º –±–æ–ª—å—à–µ –¥–Ω–µ–π –±—Ä–æ–Ω–∏ —Ç–µ–º –¥–µ—à–µ–≤–ª–µ!!!", callback_data='main_menu'))
    days = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',
            '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']
    for day in range(0, len(days), 5):
        buttons = []
        for i in range(min(5, len(days) - day)):
            buttons.append(InlineKeyboardButton(days[day + i], callback_data=f'day_{days[day + i]}'))
        markup.row(*buttons)
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def select_return_day(call):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu'))
    days = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',
            '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']
    for day in range(0, len(days), 5):
        buttons = []
        for i in range(min(5, len(days) - day)):
            buttons.append(InlineKeyboardButton(days[day + i], callback_data=f'return_day_{days[day + i]}'))
        markup.row(*buttons)
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def show_delivery_times(call):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("—Å 7:00 —É—Ç—Ä–∞ –¥–æ 19:00 –î–æ—Å—Ç–∞–≤–∫–∞/–í–æ–∑–≤—Ä–∞—Ç –º–∞—à–∏–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è!!!", callback_data='main_menu'))
    for i in range(7, 20, 3):
        markup.row(
            InlineKeyboardButton(f"{i}:00", callback_data=f"time_{i}:00"),
            InlineKeyboardButton(f"{i + 1}:00", callback_data=f"time_{i + 1}:00"),
            InlineKeyboardButton(f"{i + 2}:00", callback_data=f"time_{i + 2}:00")
        )
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def select_return_time(call):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("—Å 7:00 —É—Ç—Ä–∞ –¥–æ 19:00 –î–æ—Å—Ç–∞–≤–∫–∞/–í–æ–∑–≤—Ä–∞—Ç –º–∞—à–∏–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è!!!", callback_data='main_menu')
    )
    for i in range(7, 20, 3):
        markup.row(
            InlineKeyboardButton(f"{i}:00", callback_data=f"return_time_{i}:00"),
            InlineKeyboardButton(f"{i + 1}:00", callback_data=f"return_time_{i + 1}:00"),
            InlineKeyboardButton(f"{i + 2}:00", callback_data=f"return_time_{i + 2}:00")
        )
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def select_city(call):
    global selected_city
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–í –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ä–æ–¥–∞ —Å –¥–æ–ø–ª–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data='main_menu'))
    markup.row(InlineKeyboardButton("–ü–æ–¥–≥–æ—Ä–∏—Ü–∞", callback_data=f"city_1"),
               InlineKeyboardButton("–ë–∞—Ä", callback_data=f"city_2"),
               InlineKeyboardButton("–¶–µ—Ç–∏–Ω–µ", callback_data=f"city_3"),
               InlineKeyboardButton("–ê–Ω–¥—Ä–∏–µ–≤–∏—Ü–∞", callback_data=f"city_4"))
    markup.row(InlineKeyboardButton("–ë–µ—Ä–∞–Ω–µ", callback_data=f"city_5"),
               InlineKeyboardButton("–ë–∏–µ–ª–æ-–ü–æ–ª–µ", callback_data=f"city_6"),
               InlineKeyboardButton("–ë—É–¥–≤–∞", callback_data=f"city_7"),
               InlineKeyboardButton("–î–∞–Ω–∏–ª–æ–≤–≥—Ä–∞–¥", callback_data=f"city_8"))
    markup.row(InlineKeyboardButton("–ñ–∞–±–ª—è–∫", callback_data=f"city_9"),
               InlineKeyboardButton("–ö–æ–ª–∞—à–∏–Ω", callback_data=f"city_10"),
               InlineKeyboardButton("–ö–æ—Ç–æ—Ä", callback_data=f"city_11"),
               InlineKeyboardButton("–ú–æ–π–∫–æ–≤–∞—Ü", callback_data=f"city_12"))
    markup.row(InlineKeyboardButton("–ù–∏–∫—à–∏—á", callback_data=f"city_13"),
               InlineKeyboardButton("–ü–ª–∞–≤", callback_data=f"city_14"),
               InlineKeyboardButton("–ü–ª–µ–≤–ª—è", callback_data=f"city_15"),
               InlineKeyboardButton("–ü–ª—É–∂–∏–Ω–µ", callback_data=f"city_16"))
    markup.row(InlineKeyboardButton("–†–æ–∂–∞–µ", callback_data=f"city_17"),
               InlineKeyboardButton("–¢–∏–≤–∞—Ç", callback_data=f"city_18"),
               InlineKeyboardButton("–£–ª—Ü–∏–Ω—å", callback_data=f"city_19"),
               InlineKeyboardButton("–•–µ—Ä—Ü–µ–≥-–ù–æ–≤–∏", callback_data=f"city_20"))

    if call.data.startswith('city'):
        selected_city = int(call.data.split('_')[1])
    else:
        bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã', reply_markup=markup)


def select_return_city(call):
    global selected_return_city
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–í –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ä–æ–¥–∞ —Å –¥–æ–ø–ª–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data='main_menu'))
    markup.row(InlineKeyboardButton("–ü–æ–¥–≥–æ—Ä–∏—Ü–∞", callback_data=f"return_city_1"),
               InlineKeyboardButton("–ë–∞—Ä", callback_data=f"return_city_2"),
               InlineKeyboardButton("–¶–µ—Ç–∏–Ω–µ", callback_data=f"return_city_3"),
               InlineKeyboardButton("–ê–Ω–¥—Ä–∏–µ–≤–∏—Ü–∞", callback_data=f"return_city_4"))
    markup.row(InlineKeyboardButton("–ë–µ—Ä–∞–Ω–µ", callback_data=f"return_city_5"),
               InlineKeyboardButton("–ë–∏–µ–ª–æ-–ü–æ–ª–µ", callback_data=f"return_city_6"),
               InlineKeyboardButton("–ë—É–¥–≤–∞", callback_data=f"return_city_7"),
               InlineKeyboardButton("–î–∞–Ω–∏–ª–æ–≤–≥—Ä–∞–¥", callback_data=f"return_city_8"))
    markup.row(InlineKeyboardButton("–ñ–∞–±–ª—è–∫", callback_data=f"return_city_9"),
               InlineKeyboardButton("–ö–æ–ª–∞—à–∏–Ω", callback_data=f"return_city_10"),
               InlineKeyboardButton("–ö–æ—Ç–æ—Ä", callback_data=f"return_city_11"),
               InlineKeyboardButton("–ú–æ–π–∫–æ–≤–∞—Ü", callback_data=f"return_city_12"))
    markup.row(InlineKeyboardButton("–ù–∏–∫—à–∏—á", callback_data=f"return_city_13"),
               InlineKeyboardButton("–ü–ª–∞–≤", callback_data=f"return_city_14"),
               InlineKeyboardButton("–ü–ª–µ–≤–ª—è", callback_data=f"return_city_15"),
               InlineKeyboardButton("–ü–ª—É–∂–∏–Ω–µ", callback_data=f"return_city_16"))
    markup.row(InlineKeyboardButton("–†–æ–∂–∞–µ", callback_data=f"return_city_17"),
               InlineKeyboardButton("–¢–∏–≤–∞—Ç", callback_data=f"return_city_18"),
               InlineKeyboardButton("–£–ª—Ü–∏–Ω—å", callback_data=f"return_city_19"),
               InlineKeyboardButton("–•–µ—Ä—Ü–µ–≥-–ù–æ–≤–∏", callback_data=f"return_city_20"))

    if call.data.startswith('return_city'):
        selected_return_city = int(call.data.split('_')[1])
    else:
        bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã', reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.lower()
    for pattern, response in responses.items():
        if re.match(pattern, text):
            bot.send_message(message.chat.id, response)
            break
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ "
                                          "–∏–ª–∏ –û—Å—Ç–∞–≤—Ç–µ –∑–∞—è–≤–∫—É –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.–°–ø–∞—Å–∏–±–æ .")


def get_first_last_name(user_name):
    user_name_parts = user_name.split()
    return user_name_parts[0], user_name_parts[-1]


def confirm_booking(call):
    bot.send_message(call.message.chat.id, '–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.\n')
    name = user_data.get('first_name')
    surname = user_data.get('last_name')
    phone_number = user_data.get('phone_number')
    if name and surname and phone_number:
        file_path = 'output.txt'
        if os.path.exists(file_path):
            with open(file_path, 'a', encoding='utf-8') as f:
                f.write(f'{" " * 12}üöó –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üöó{" " * 20}\n')
                f.write('**************************************************\n')
                f.write(f'–ú–∞—Ä–∫–∞: {user_data.get("brand")} üöó\n')
                f.write(f'{"=" * 50}\n')
                f.write(f'–ú–æ–¥–µ–ª—å: {user_data.get("model")} üèéÔ∏è\n')
                f.write(f'{"=" * 50}\n')
                f.write(f'–ì–æ–¥: {user_data.get("year")} \n')
                f.write(f'{"=" * 50}\n')
                f.write(f'–ú–µ—Å—è—Ü –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("month_name")} \n')
                f.write(f'{"=" * 50}\n')
                f.write(f'–ú–µ—Å—è—Ü –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_month_name")} \n')
                f.write(f'{"=" * 50}\n')
                f.write(f'–î–µ–Ω—å –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("day")} \n')
                f.write(f'{"=" * 50}\n')
                f.write(f'–î–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_day")} \n')
                f.write(f'{"=" * 50}\n')
                f.write(f'‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("time")} ‚è∞\n')
                f.write(f'{"=" * 50}\n')
                f.write(f'‚è∞ –í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_time")[2:]} ‚è∞\n')
                f.write(f'{"=" * 50}\n')
                f.write(f'–í–∞—à–µ –∏–º—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º–µ: {name} {surname}\n')
                f.write(f'{"=" * 50}\n')
                f.write(f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n')
                f.write(f'{"=" * 50}\n')
                f.write(f'üè† –ì–æ—Ä–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_city_name")} \n')
                f.write(f'{"=" * 50}\n')
                f.write(f'üè† –ì–æ—Ä–æ–¥ –ü–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("city_name")} \n')
                f.write(f'{"=" * 50}\n')
                f.write('**************************************************\n')
        else:
            print(f"File '{file_path}' does not exist.")

        bot.send_message(call.message.chat.id,
                         f'üì≤ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n{"=" * 50}\n\n–ú–∞—Ä–∫–∞: {user_data.get("brand")} üöó\n–ú–æ–¥–µ–ª—å:'
                         f' {user_data.get("model")} üèéÔ∏è\n–ì–æ–¥: {user_data.get("year")} \n'
                         f'–ú–µ—Å—è—Ü –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("month_name")} üìÜ\n'
                         f'–ú–µ—Å—è—Ü –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_month_name")} üìÜ\n'
                         f'–î–µ–Ω—å –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("day")} üìÖ\n'
                         f'–î–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_day")} üìÖ\n'
                         f'–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –ú–∞—à–∏–Ω—ã: {user_data.get("time")} ‚è∞\n'
                         f'–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_time").replace("e_", "")} ‚è∞\n'
                         f'–ì–æ—Ä–æ–¥ –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("city_name")} üèôÔ∏è\n'
                         f'–ì–æ—Ä–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_city_name")} üèôÔ∏è\n\n{"=" * 50}\n\n'
                         f'–í–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è : {name} {surname} üë´\n\n'
                         f'–í–∞—à –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ : {phone_number} üì±\n\n'
                         f'M—ã –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è ! üë•')

        bot.send_message(866323263,
                         f'üì® –ö–ª–∏–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n{"=" * 50}\n\n–ú–∞—Ä–∫–∞: {user_data.get("brand")} üöó\n–ú–æ–¥–µ–ª—å:'
                         f' {user_data.get("model")} üèéÔ∏è\n–ì–æ–¥: {user_data.get("year")} \n'
                         f'–ú–µ—Å—è—Ü –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("month_name")} üìÜ\n'
                         f'–ú–µ—Å—è—Ü –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_month_name")} üìÜ\n'
                         f'–î–µ–Ω—å –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("day")} üìÖ\n'
                         f'–î–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_day")} üìÖ\n'
                         f'–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –ú–∞—à–∏–Ω—ã: {user_data.get("time")} ‚è∞\n'
                         f'–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_time").replace("e_", "")} ‚è∞\n'
                         f'–ì–æ—Ä–æ–¥ –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã: {user_data.get("city_name")} üèôÔ∏è\n'
                         f'–ì–æ—Ä–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã: {user_data.get("return_city_name")} üèôÔ∏è\n\n{"=" * 50}\n\n'
                         f'–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º: {call.from_user.full_name} üë•\n\n'
                         f'–ò–º—è –∏ –§–∞–º–∏–ª–∏—è –ö–ª–∏–µ–Ω—Ç–∞ : '
                         f'{name} {surname} üë´\n\n'
                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –ö–ª–∏–µ–Ω—Ç–∞: {phone_number} üì±\n\n'
                         f'—Ç–µ–∫—Å—Ç üë•')

        bot.send_message(call.message.chat.id,
                         "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—è–≤–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É "
                         "‚òéÔ∏è 99999999999")


if __name__ == '__main__':
    bot.polling(none_stop=True)
